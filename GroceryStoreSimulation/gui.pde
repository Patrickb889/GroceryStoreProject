/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:Window:634332:
  appc.background(230);
} //_CODE_:Window:634332:

public void randomColourChangeClicked(GButton source, GEvent event) { //_CODE_:randomColourChange:897214:
  if(!textbox.show){
   changeFixtureColour("Random");
  }
} //_CODE_:randomColourChange:897214:

public void addProductsClicked(GButton source, GEvent event) { //_CODE_:addProducts:854692:
   addProducts();
} //_CODE_:addProducts:854692:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:loadStore:472118:
} //_CODE_:loadStore:472118:

public void loadStoreButtonClicked(GButton source, GEvent event) { //_CODE_:loadStoreButton:532855:
  load(loadStore.getSelectedText());
} //_CODE_:loadStoreButton:532855:

public void FixturePresetsDropdownChanged(GDropList source, GEvent event) { //_CODE_:fixturePresetsDropdown:951029:
} //_CODE_:fixturePresetsDropdown:951029:

public void addFixtureButtonClicked(GButton source, GEvent event) { //_CODE_:addFixtureButton:862695:
  String selectedPreset = fixturePresetsDropdown.getSelectedText();
  presetIndex = int(selectedPreset.substring(0, selectedPreset.indexOf(")"))) - 1;
  addFixture();
} //_CODE_:addFixtureButton:862695:

public void renameFixtureClicked(GButton source, GEvent event) { //_CODE_:renameFixture:858910:
  renameFixture();
} //_CODE_:renameFixture:858910:

public void replaceProductsClicked(GButton source, GEvent event) { //_CODE_:replaceProducts:821293:
  reenterProducts();
} //_CODE_:replaceProducts:821293:

public void recalculatePathButtonClicked(GButton source, GEvent event) { //_CODE_:recaluclatePathButton:975154:
  int numFixtures = fixtures.size();
  allDistances = new float[numFixtures][numFixtures];
  optimalPaths = new String[numFixtures][numFixtures];
  
  recalculatePath(); //Manually recalculating the optimal path
} //_CODE_:recaluclatePathButton:975154:

public void saveStoreButtonClicked(GButton source, GEvent event) { //_CODE_:saveStoreButton:984468:
  if(!textbox.show && selectedFixture == -1) {
   saveStore(); 
  }
} //_CODE_:saveStoreButton:984468:

public void exactColourChangeClicked(GButton source, GEvent event) { //_CODE_:exactColourChange:526100:
  if(!textbox.show){
   changeFixtureColour("Custom"); 
  }
} //_CODE_:exactColourChange:526100:

public void duplicateClicked(GButton source, GEvent event) { //_CODE_:duplicate:500062:
  Fixture f = fixtures.get(0);
  
  if (selectedFixture != -1) {
    f = fixtures.get(selectedFixture);  // Currently selected fixture
  }
  
  if(selectedFixture > 0) {
   // Same position, main side, type, name, max stock, restock chance, colour, and default point, but blank list of products
    fixtures.add(new Fixture(subset(f.position, 0), subset(f.mainSideCoords, 0), f.type, f.name, new String[]{}, f.maxStock, f.colour, new PVector(f.defaultPoint.x, f.defaultPoint.y)));
    
    selectedFixture = fixtures.size() - 1;
    Fixture newF = fixtures.get(selectedFixture);
    
    newF.move(new int[]{10, 10});  // Move it a little so that the new fixture isn't sitting right on top of the old one
    obstacles.add(newF.position);
    
    // Prepare for path recalculation
    recalcRequired = true;
    int numFixtures = fixtures.size();
    allDistances = new float[numFixtures][numFixtures];
    optimalPaths = new String[numFixtures][numFixtures]; 
  }
} //_CODE_:duplicate:500062:

public void animationCheckbox_clicked1(GCheckbox source, GEvent event) { //_CODE_:animationCheckbox:870596:
  animatePath = !animatePath;
} //_CODE_:animationCheckbox:870596:

public void supplyCheckbox_clicked1(GCheckbox source, GEvent event) { //_CODE_:supplyCheckbox:865095:
  ignoreStock = !ignoreStock;
} //_CODE_:supplyCheckbox:865095:

public void busynessSlider_change1(GSlider source, GEvent event) { //_CODE_:busynessSlider:915792:
  busyness = busynessSlider.getValueI();
} //_CODE_:busynessSlider:915792:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  Window = GWindow.getWindow(this, "Window title", 0, 0, 300, 470, JAVA2D);
  Window.noLoop();
  Window.setActionOnClose(G4P.KEEP_OPEN);
  Window.addDrawHandler(this, "win_draw1");
  randomColourChange = new GButton(Window, 25, 370, 100, 40);
  randomColourChange.setText("Change Fixture Colour-Random");
  randomColourChange.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  randomColourChange.addEventHandler(this, "randomColourChangeClicked");
  addProducts = new GButton(Window, 175, 320, 100, 40);
  addProducts.setText("Add Products To Fixture");
  addProducts.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  addProducts.addEventHandler(this, "addProductsClicked");
  loadStore = new GDropList(Window, 25, 80, 100, 100, 3, 10);
  loadStore.setItems(loadStrings("list_472118"), 0);
  loadStore.setLocalColorScheme(GCScheme.RED_SCHEME);
  loadStore.addEventHandler(this, "dropList1_click1");
  loadStoreButton = new GButton(Window, 25, 30, 100, 40);
  loadStoreButton.setText("Load Store");
  loadStoreButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  loadStoreButton.addEventHandler(this, "loadStoreButtonClicked");
  fixturePresetsDropdown = new GDropList(Window, 175, 80, 100, 150, 5, 10);
  fixturePresetsDropdown.setItems(loadStrings("list_951029"), 0);
  fixturePresetsDropdown.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  fixturePresetsDropdown.addEventHandler(this, "FixturePresetsDropdownChanged");
  addFixtureButton = new GButton(Window, 175, 30, 100, 40);
  addFixtureButton.setText("Add Fixture");
  addFixtureButton.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  addFixtureButton.addEventHandler(this, "addFixtureButtonClicked");
  renameFixture = new GButton(Window, 175, 270, 100, 40);
  renameFixture.setText("Rename Fixture");
  renameFixture.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  renameFixture.addEventHandler(this, "renameFixtureClicked");
  replaceProducts = new GButton(Window, 175, 370, 100, 40);
  replaceProducts.setText("Replace Products In Fixture");
  replaceProducts.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  replaceProducts.addEventHandler(this, "replaceProductsClicked");
  recaluclatePathButton = new GButton(Window, 25, 270, 100, 40);
  recaluclatePathButton.setText("Recalculate Optimal Path");
  recaluclatePathButton.addEventHandler(this, "recalculatePathButtonClicked");
  saveStoreButton = new GButton(Window, 24, 201, 100, 40);
  saveStoreButton.setText("Save Store");
  saveStoreButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  saveStoreButton.addEventHandler(this, "saveStoreButtonClicked");
  exactColourChange = new GButton(Window, 25, 420, 100, 40);
  exactColourChange.setText("Change Fixture Colour-Exact");
  exactColourChange.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  exactColourChange.addEventHandler(this, "exactColourChangeClicked");
  duplicate = new GButton(Window, 175, 420, 100, 40);
  duplicate.setText("Duplicate Fixture");
  duplicate.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  duplicate.addEventHandler(this, "duplicateClicked");
  storeLabel = new GLabel(Window, 25, 10, 100, 20);
  storeLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  storeLabel.setText("Store");
  storeLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  storeLabel.setOpaque(false);
  createFixtureLabel = new GLabel(Window, 175, 10, 100, 20);
  createFixtureLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  createFixtureLabel.setText("Creating Fixtures");
  createFixtureLabel.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  createFixtureLabel.setOpaque(false);
  pathfindingLabel = new GLabel(Window, 25, 250, 100, 20);
  pathfindingLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  pathfindingLabel.setText("Optimal Path");
  pathfindingLabel.setOpaque(false);
  editingLabel = new GLabel(Window, 175, 250, 100, 20);
  editingLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  editingLabel.setText("Editing Fixtures");
  editingLabel.setOpaque(false);
  colourLabel = new GLabel(Window, 20, 350, 110, 20);
  colourLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  colourLabel.setText("Changing Colours");
  colourLabel.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  colourLabel.setOpaque(false);
  animationCheckbox = new GCheckbox(Window, 174, 224, 120, 20);
  animationCheckbox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  animationCheckbox.setText("Animate Path");
  animationCheckbox.setOpaque(false);
  animationCheckbox.addEventHandler(this, "animationCheckbox_clicked1");
  supplyCheckbox = new GCheckbox(Window, 174, 191, 120, 30);
  supplyCheckbox.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  supplyCheckbox.setText("Account For Product Supply");
  supplyCheckbox.setOpaque(false);
  supplyCheckbox.addEventHandler(this, "supplyCheckbox_clicked1");
  label1 = new GLabel(Window, 69, 123, 161, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Busyness of Store");
  label1.setOpaque(false);
  busynessSlider = new GSlider(Window, 48, 142, 200, 53, 10.0);
  busynessSlider.setShowValue(true);
  busynessSlider.setLimits(10, 0, 100);
  busynessSlider.setNbrTicks(6);
  busynessSlider.setShowTicks(true);
  busynessSlider.setNumberFormat(G4P.INTEGER, 0);
  busynessSlider.setOpaque(false);
  busynessSlider.addEventHandler(this, "busynessSlider_change1");
  Window.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow Window;
GButton randomColourChange; 
GButton addProducts; 
GDropList loadStore; 
GButton loadStoreButton; 
GDropList fixturePresetsDropdown; 
GButton addFixtureButton; 
GButton renameFixture; 
GButton replaceProducts; 
GButton recaluclatePathButton; 
GButton saveStoreButton; 
GButton exactColourChange; 
GButton duplicate; 
GLabel storeLabel; 
GLabel createFixtureLabel; 
GLabel pathfindingLabel; 
GLabel editingLabel; 
GLabel colourLabel; 
GCheckbox animationCheckbox; 
GCheckbox supplyCheckbox; 
GLabel label1; 
GSlider busynessSlider; 
